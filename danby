#!/usr/bin/env node
var argv = require('yargs').argv;
var express = require('express');
var fs = require('fs')
var protobuf = require('protobufjs');
var api = require('./template-parser');

if (typeof(argv.grpc)=='undefined' || typeof(argv.proto)=='undefined' 
	|| typeof(argv.service)=='undefined' || typeof(argv.pkg)=='undefined'
	|| typeof(argv.port)=='undefined') {
	console.log(argv.$0 + " --grpc localhost:50001 --proto file.proto --service Greeter --pkg helloworld --port 3000");
	process.exit(1);	
}

var app = express();
var expressWs = require('express-ws')(app);
var PROTO_PATH = argv.proto;
var apiText = "";
var methodNames;

protobuf.load(PROTO_PATH)
    .then(function(root) {
      const apiData = api(root,argv.service);
      apiText = apiData["output"];
      methodNames = apiData["methods"];
    });


var grpc = require('grpc');
var proto = grpc.load(PROTO_PATH);
var stub; 
eval("stub = proto." + argv.pkg);

app.use('/', express.static("."))

app.get('/api', function(req, res, next) {
   res.send(apiText);	
   res.end();
});

app.ws('/ws', function(ws, req) {
  ws.on('message', function(msg) {
 	  function respond(data) {
		var str = JSON.stringify(data);
		if (typeof(argv.debug)!=='undefined' && argv.debug==='true') 
			console.log("S:" + str);
		ws.send(str);
		ws.close();
          };
	  var obj = JSON.parse(msg);
	  var metadata = new grpc.Metadata();

	  if (methodNames.includes(obj["method"]) && typeof(obj["payload"]==='object')) {

		  var client;
		  if (typeof(obj["metadata"])!=='undefined') {

			Object.keys(obj["metadata"]).forEach((name,idx) => {
				metadata.set(name, obj["metadata"][name]);	
			});
		  }

		  eval("client = new stub." + argv.service + "('" + argv.grpc + "', grpc.credentials.createInsecure())");

		  var call = "client." + obj["method"] + "(" + JSON.stringify(obj["payload"]) + ", metadata , function (err,response) { respond(response); });";
		  if (typeof(argv.debug)!=='undefined' && argv.debug==='true') 
	  		console.log("C:" + call);
		  eval(call); 
	  }
  });

});
 
app.listen(argv.port);
